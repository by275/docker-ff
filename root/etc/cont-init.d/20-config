#!/usr/bin/with-contenv bash
. /usr/local/bin/variables
set -e

repo=$(echo "${FF_GIT}" | cut -d/ -f4-)
repo="${repo%%.git}"
path="/app/flaskfarm"

# get version to install
if [[ "${#FF_VERSION}" -eq 40 ]]; then
    # long hash to short
    FF_VERSION="${FF_VERSION:0:7}"
fi

if [[ ! -n "${FF_VERSION}" ]] || [[ -z "${FF_VERSION}" ]] || \
    [[ "${FF_VERSION}" == "docker" ]] || [[ "${FF_VERSION}" == "null" ]]; then
    FF_VERSION="${FF_VERSION_DEFAULT}"
fi

# check version installed
GIT_TAG="$(git -C "$path" describe --tags --exact-match 2>/dev/null || :)"
GIT_BRANCH="$(git -C "$path" rev-parse --abbrev-ref HEAD 2>/dev/null)"
GIT_HASH="$(git -C "$path" rev-parse --short HEAD 2>/dev/null)"

if [[ "$FF_VERSION" == "$GIT_TAG" ]]; then
    echo "*** using $repo@$GIT_TAG"
elif [[ "$FF_VERSION" == "$GIT_HASH" ]]; then
    echo "*** using $repo@$GIT_HASH"
elif [[ "$FF_VERSION" == "$GIT_BRANCH" ]]; then
    git_pull "$path"
else
    echo "*** installing $repo@$FF_VERSION"
    git -C /tmp clone --quiet -b "$FF_VERSION" "$FF_GIT" >/dev/null 2>&1 || \
        {
            git -C /tmp clone --quiet "$FF_GIT" >/dev/null 2>&1 ;
            git -C /tmp/flaskfarm checkout "$FF_VERSION" >/dev/null 2>&1 ;
        }
    if is_git_dir /tmp/flaskfarm; then
        rm -rf "$path" && mv /tmp/flaskfarm "$(dirname "$path")"/
    else
        echo "    ERROR: failed to install $repo@$FF_VERSION"
        echo "*** fallback to $repo@$FF_VERSION_DEFAULT"
        if ! is_git_dir "$path"; then
            rm -rf "$path" && \
                git -C "$(dirname "$path")" clone --depth 1 "$FF_VERSION_DEFAULT" >/dev/null 2>&1 && \
                echo "    ERROR: fallback to $repo@$FF_VERSION_DEFAULT"
        fi
    fi
    # cleanup
    rm -rf /tmp/flaskfarm
fi

plugin_root="/data/plugins"
if [ "${PLUGIN_UPDATE_FROM_PYTHON}" = "false" ] && [ -d "${plugin_root}" ]; then
  prune_paths=$(find "${plugin_root}" -name .noupdate -printf "-path %h -o ")
  while read -r n; do
    # sometimes empty string comes in
    [ -d "${n}" ] && git_pull "${n}"
  done <<<$(find "${plugin_root}" -maxdepth 1 -mindepth 1 -type d \( $prune_paths -false \) -prune -o -type d -print)
fi

# permissions
fix_ownership /data
